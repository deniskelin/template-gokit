package main

import (
	"fmt"
	"time"

	"github.com/deniskelin/billing-gokit/internal/service"
	"github.com/rs/zerolog"
)

type loggingMiddleware struct {
	logHttpRequest bool
	Logger         zerolog.Logger
	Next           service.IPCRService
}

func (mw loggingMiddleware) SendEvent(ev service.SendEventRequest) (output service.SendEventResponse, err error) {

	var reqparams []byte
	if mw.logHttpRequest {
		reqparams, _ = ev.MarshalJSON()
	}

	defer func(begin time.Time, evt service.SendEventRequest, reqb []byte) {
		if err != nil {
			mw.Logger.Error().
				Str("method", "sendEvent").
				Str("eventType", string(evt.Event.Type.GetFullType())).
				Bytes("eventData", reqb).
				Str("clientID", evt.ClientID).
				Str("h323_conf_id", evt.H323ConfID).
				Str("took", fmt.Sprintf("%dms", time.Since(begin).Milliseconds())).
				Err(err).
				Send()
		} else {
			mw.Logger.Info().
				Str("method", "sendEvent").
				Str("eventType", string(evt.Event.Type.GetFullType())).
				Bytes("eventData", reqb).
				Str("clientID", evt.ClientID).
				Str("h323_conf_id", evt.H323ConfID).
				Str("took", fmt.Sprintf("%dms", time.Since(begin).Milliseconds())).
				Send()
		}
	}(time.Now(), ev, reqparams)

	output, err = mw.Next.SendEvent(ev)
	return
}


//var svc service.IPCRService
//svc = service.IpcrService{Logger: apiLogger}
//svc = instrumentingMiddleware{requestCount, requestLatency, svc}
//svc = loggingMiddleware{logHttpRequest: appConfig.HTTP.RequestLoggingEnabled, Logger: httpLogger, Next: svc}
//
//sendEventHandler := httptransport.NewServer(
//	transport.MakeSendEventEndpoint(svc),
//	transport.DecodeSendEventRequest,
//	transport.EncodeSendEventResponse,
//)

//func MakeSendEventEndpoint(svc service.RDSService) endpoint.Endpoint {
//	return func(_ context.Context, request interface{}) (interface{}, error) {
//		req := request.(service.SendEventRequest)
//		v, err := svc.SendEvent(req)
//		if err != nil {
//			return service.SendEventResponse{Request: nil, Err: err}, nil
//		}
//		return v, nil
//	}
//}
